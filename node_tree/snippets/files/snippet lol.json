{
    "name": "snippet lol",
    "uid": "D14ED",
    "function": "                    SNIPPET_VARS = {\"test\": 0, \"blend_data\": [], \"new_variable\": \"\", }\n                    def snippet_lol():\n                        try:\n                             function_return_A3F24 = first()\n                            SNIPPET_VARS[\"new_variable\"] = sn_cast_string(sn_find_area_by_type(\"VIEW_3D\",True))\n                            sn_cast_blend_data(bpy.context.scene).new_property = r\"\"\n                            return 5, bpy.context.active_object, \n                            \n                            \n                            \n                            \n                        except Exception as exc:\n                            print(str(exc) + \" | Error in function snippet lol\")\n                    ",
    "register": "\nif not 'new_property' in bpy.types.Scene.bl_rna.properties: bpy.types.Scene.new_property = bpy.props.StringProperty(name='New Property',description='',subtype='NONE',options=set(),default='')\nif not 'test_property' in bpy.types.Scene.bl_rna.properties: bpy.types.Scene.test_property = bpy.props.StringProperty(name='Test Property',description='',subtype='NONE',options=set(),default='')\n",
    "unregister": "\nif 'new_property' in bpy.types.Scene.bl_rna.properties: del bpy.types.Scene.new_property\nif 'test_property' in bpy.types.Scene.bl_rna.properties: del bpy.types.Scene.test_property\n",
    "properties": [],
    "func_name": "snippet_lol",
    "inputs": [
        {
            "idname": "SN_ExecuteSocket",
            "name": "Run Function",
            "subtype": "NONE",
            "attributes": {}
        }
    ],
    "outputs": [
        {
            "idname": "SN_ExecuteSocket",
            "name": "Execute",
            "subtype": "NONE",
            "attributes": {}
        },
        {
            "idname": "SN_IntegerSocket",
            "name": "Integer",
            "subtype": "NONE",
            "attributes": {}
        },
        {
            "idname": "SN_BlendDataSocket",
            "name": "Active",
            "subtype": "NONE",
            "attributes": {}
        }
    ],
    "code_imperative": "\n                    def sn_branch(v1,v2,condition):\n                        if condition:\n                            return v1\n                        return v2\n                    \n                    def sn_find_area_by_type(area_type, boolean=False):\n                        for area in bpy.context.screen.areas:\n                            if area.type == area_type:\n                                return area if not boolean else True\n                        return None if not boolean else False\n                    ",
    "variable_definitions": {
        "blend_data": [
            "Blend Data",
            "BLEND_DATA"
        ],
        "new_variable": [
            "New Variable",
            "STRING"
        ],
        "test": [
            "test",
            "INTEGER"
        ]
    },
    "function_definitions": {
        "15FD7": "\n                    def first():\n                        try:\n                             SNIPPET_VARS[\"new_variable\"] = r\"\"\n                            sn_print(\"New Addon\",r\"\")\n                            sn_cast_blend_data(bpy.context.scene).new_property = r\"\"\n                            function_return_0377E = second()\n                            sn_print(\"New Addon\",sn_cast_string(SNIPPET_VARS[\"blend_data\"]))\n                            \n                            \n                            \n                            \n                            \n                            \n                        except Exception as exc:\n                            print(str(exc) + \" | Error in function first\")\n                    ",
        "F5117": "\n                    def second():\n                        try:\n                             SNIPPET_VARS[\"new_variable\"] = r\"\"\n                            sn_print(\"New Addon\",r\"hi\")\n                            sn_cast_blend_data(bpy.context.scene).new_property = r\"\"\n                            sn_print(\"New Addon\",sn_cast_string(sn_branch(r\"looool\",r\"no\",True)))\n                            SNIPPET_VARS[\"test\"] = 1\n                            sn_cast_blend_data(bpy.context.scene).test_property = r\"lol\"\n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        except Exception as exc:\n                            print(str(exc) + \" | Error in function second\")\n                    "
    },
    "property_identifiers": {
        "new_property": [
            "New Property",
            "STRING",
            "Scene"
        ],
        "test_property": [
            "Test Property",
            "STRING",
            "Scene"
        ]
    }
}